
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyect.analizador;

import java.io.PrintWriter;

import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

private PrintWriter writer = new PrintWriter(System.out);

public void setWriter(PrintWriter writer) {
        this.writer = writer;
    }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  private ComplexSymbolFactory symbolFactory;

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    super(s, sf);
    this.symbolFactory = (ComplexSymbolFactory) sf; // ðŸ”§ casteas y lo guardas
}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\004\007" +
    "\000\002\004\005\000\002\004\007\000\002\004\011\000" +
    "\002\004\005\000\002\004\010\000\002\004\015\000\002" +
    "\007\003\000\002\007\002\000\002\010\003\000\002\010" +
    "\005\000\002\011\003\000\002\011\005\000\002\005\005" +
    "\000\002\005\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\002\000\002\013\006\000\002\013\007\000\002" +
    "\014\006\000\002\014\005\000\002\015\003\000\002\016" +
    "\005\000\002\006\003\000\002\017\005\000\002\017\003" +
    "\000\002\020\005\000\002\020\003\000\002\021\004\000" +
    "\002\021\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\020\004\006\005\012\006\011\011\005\012" +
    "\010\013\013\014\014\001\002\000\004\002\174\001\002" +
    "\000\022\020\024\021\027\036\034\037\025\045\030\046" +
    "\026\047\021\050\017\001\002\000\004\045\163\001\002" +
    "\000\024\002\uffff\004\uffff\005\uffff\006\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\042\uffff\001\002\000\004\037\136" +
    "\001\002\000\022\020\024\021\027\036\034\037\025\045" +
    "\030\046\026\047\021\050\017\001\002\000\022\020\024" +
    "\021\027\036\034\037\025\045\030\046\026\047\021\050" +
    "\017\001\002\000\004\045\073\001\002\000\022\020\024" +
    "\021\027\036\034\037\025\045\030\046\026\047\021\050" +
    "\017\001\002\000\022\002\000\004\006\005\012\006\011" +
    "\011\005\012\010\013\013\014\014\001\002\000\024\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\042\ufffe\001\002\000\044\016\uffcc\017\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\043" +
    "\uffcc\044\uffcc\001\002\000\044\016\uffd4\017\uffd4\022\uffd4" +
    "\023\uffd4\024\044\025\045\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\040\uffd4\043\uffd4" +
    "\044\uffd4\001\002\000\044\016\uffcd\017\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\043\uffcd\044" +
    "\uffcd\001\002\000\020\016\uffe2\017\uffe2\034\071\035\uffe2" +
    "\040\uffe2\043\uffe2\044\uffe2\001\002\000\016\016\uffe4\017" +
    "\uffe4\035\067\040\uffe4\043\uffe4\044\uffe4\001\002\000\044" +
    "\016\uffcb\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\040\uffcb\043\uffcb\044\uffcb\001\002\000\022\020" +
    "\024\021\027\036\034\037\025\045\030\046\026\047\021" +
    "\050\017\001\002\000\044\016\uffce\017\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\040\uffce\043\uffce\044" +
    "\uffce\001\002\000\044\016\uffca\017\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\040\uffca\043\uffca\044\uffca" +
    "\001\002\000\044\016\uffcf\017\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\040\uffcf\043\uffcf\044\uffcf\001" +
    "\002\000\044\016\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\040\uffd1\043\uffd1\044\uffd1\001\002" +
    "\000\034\016\uffde\017\uffde\026\052\027\051\030\055\031" +
    "\056\032\053\033\054\034\uffde\035\uffde\040\uffde\043\uffde" +
    "\044\uffde\001\002\000\040\016\uffd7\017\uffd7\022\042\023" +
    "\041\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\040\uffd7\043\uffd7\044\uffd7\001\002\000" +
    "\022\020\024\021\027\036\034\037\025\045\030\046\026" +
    "\047\021\050\017\001\002\000\004\044\037\001\002\000" +
    "\020\016\uffe0\017\uffe0\034\uffe0\035\uffe0\040\uffe0\043\uffe0" +
    "\044\uffe0\001\002\000\024\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\042\ufff8\001\002" +
    "\000\020\016\uffdf\017\uffdf\034\uffdf\035\uffdf\040\uffdf\043" +
    "\uffdf\044\uffdf\001\002\000\020\020\024\021\027\037\025" +
    "\045\030\046\026\047\021\050\017\001\002\000\020\020" +
    "\024\021\027\037\025\045\030\046\026\047\021\050\017" +
    "\001\002\000\044\016\uffd6\017\uffd6\022\uffd6\023\uffd6\024" +
    "\044\025\045\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\040\uffd6\043\uffd6\044\uffd6\001" +
    "\002\000\020\020\024\021\027\037\025\045\030\046\026" +
    "\047\021\050\017\001\002\000\020\020\024\021\027\037" +
    "\025\045\030\046\026\047\021\050\017\001\002\000\044" +
    "\016\uffd2\017\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\040\uffd2\043\uffd2\044\uffd2\001\002\000\044\016" +
    "\uffd3\017\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\040\uffd3\043\uffd3\044\uffd3\001\002\000\044\016\uffd5" +
    "\017\uffd5\022\uffd5\023\uffd5\024\044\025\045\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\040\uffd5\043\uffd5\044\uffd5\001\002\000\020\020\024\021" +
    "\027\037\025\045\030\046\026\047\021\050\017\001\002" +
    "\000\020\020\024\021\027\037\025\045\030\046\026\047" +
    "\021\050\017\001\002\000\020\020\024\021\027\037\025" +
    "\045\030\046\026\047\021\050\017\001\002\000\020\020" +
    "\024\021\027\037\025\045\030\046\026\047\021\050\017" +
    "\001\002\000\020\020\024\021\027\037\025\045\030\046" +
    "\026\047\021\050\017\001\002\000\020\020\024\021\027" +
    "\037\025\045\030\046\026\047\021\050\017\001\002\000" +
    "\040\016\uffdc\017\uffdc\022\042\023\041\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040" +
    "\uffdc\043\uffdc\044\uffdc\001\002\000\040\016\uffdd\017\uffdd" +
    "\022\042\023\041\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\043\uffdd\044\uffdd" +
    "\001\002\000\040\016\uffd8\017\uffd8\022\042\023\041\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\040\uffd8\043\uffd8\044\uffd8\001\002\000\040\016" +
    "\uffd9\017\uffd9\022\042\023\041\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\043" +
    "\uffd9\044\uffd9\001\002\000\040\016\uffdb\017\uffdb\022\042" +
    "\023\041\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\040\uffdb\043\uffdb\044\uffdb\001\002" +
    "\000\040\016\uffda\017\uffda\022\042\023\041\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\040\uffda\043\uffda\044\uffda\001\002\000\004\040\066\001" +
    "\002\000\044\016\uffd0\017\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\040\uffd0\043\uffd0\044\uffd0\001\002" +
    "\000\022\020\024\021\027\036\034\037\025\045\030\046" +
    "\026\047\021\050\017\001\002\000\020\016\uffe3\017\uffe3" +
    "\034\071\035\uffe3\040\uffe3\043\uffe3\044\uffe3\001\002\000" +
    "\022\020\024\021\027\036\034\037\025\045\030\046\026" +
    "\047\021\050\017\001\002\000\020\016\uffe1\017\uffe1\034" +
    "\uffe1\035\uffe1\040\uffe1\043\uffe1\044\uffe1\001\002\000\004" +
    "\037\074\001\002\000\006\040\ufff4\045\075\001\002\000" +
    "\006\040\ufff3\043\ufff3\001\002\000\004\040\102\001\002" +
    "\000\006\040\ufff5\043\100\001\002\000\004\045\101\001" +
    "\002\000\006\040\ufff2\043\ufff2\001\002\000\004\041\103" +
    "\001\002\000\022\004\006\005\012\006\011\011\005\012" +
    "\010\013\013\014\014\042\106\001\002\000\004\015\105" +
    "\001\002\000\024\002\ufff9\004\ufff9\005\ufff9\006\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\042\ufff9\001\002\000\010" +
    "\007\uffee\010\uffee\015\uffee\001\002\000\022\004\006\005" +
    "\012\006\011\011\005\012\010\013\013\014\014\042\110" +
    "\001\002\000\010\007\uffef\010\uffef\015\uffef\001\002\000" +
    "\006\043\113\044\114\001\002\000\006\043\ufff1\044\ufff1" +
    "\001\002\000\022\020\024\021\027\036\034\037\025\045" +
    "\030\046\026\047\021\050\017\001\002\000\024\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\042\ufffb\001\002\000\006\043\ufff0\044\ufff0\001\002" +
    "\000\004\017\117\001\002\000\004\041\103\001\002\000" +
    "\010\007\124\010\123\015\uffeb\001\002\000\006\010\132" +
    "\015\uffed\001\002\000\004\015\131\001\002\000\022\020" +
    "\024\021\027\036\034\037\025\045\030\046\026\047\021" +
    "\050\017\001\002\000\004\041\103\001\002\000\004\015" +
    "\uffec\001\002\000\004\017\127\001\002\000\004\041\103" +
    "\001\002\000\006\010\uffea\015\uffea\001\002\000\024\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\042\ufff7\001\002\000\022\020\024\021\027\036" +
    "\034\037\025\045\030\046\026\047\021\050\017\001\002" +
    "\000\004\017\134\001\002\000\004\041\103\001\002\000" +
    "\006\010\uffe9\015\uffe9\001\002\000\006\004\140\045\137" +
    "\001\002\000\004\032\161\001\002\000\004\045\156\001" +
    "\002\000\004\044\142\001\002\000\022\020\024\021\027" +
    "\036\034\037\025\045\030\046\026\047\021\050\017\001" +
    "\002\000\004\044\145\001\002\000\004\044\uffe6\001\002" +
    "\000\004\045\146\001\002\000\004\032\154\001\002\000" +
    "\004\040\150\001\002\000\004\016\151\001\002\000\004" +
    "\041\103\001\002\000\004\015\153\001\002\000\024\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\042\ufff6\001\002\000\022\020\024\021\027\036" +
    "\034\037\025\045\030\046\026\047\021\050\017\001\002" +
    "\000\004\040\uffe5\001\002\000\004\032\157\001\002\000" +
    "\022\020\024\021\027\036\034\037\025\045\030\046\026" +
    "\047\021\050\017\001\002\000\004\044\uffe8\001\002\000" +
    "\022\020\024\021\027\036\034\037\025\045\030\046\026" +
    "\047\021\050\017\001\002\000\004\044\uffe7\001\002\000" +
    "\006\032\164\044\165\001\002\000\022\020\024\021\027" +
    "\036\034\037\025\045\030\046\026\047\021\050\017\001" +
    "\002\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\042\ufffd\001\002\000\004\044" +
    "\167\001\002\000\024\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\042\ufffc\001\002\000" +
    "\004\016\171\001\002\000\004\041\103\001\002\000\004" +
    "\015\173\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\042\ufffa\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\010\002\003\003\014\004\006\001\001\000" +
    "\002\001\001\000\022\006\167\017\022\020\021\021\035" +
    "\022\031\023\032\024\017\025\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\115" +
    "\017\022\020\021\021\035\022\031\023\032\024\017\025" +
    "\030\001\001\000\024\006\111\011\110\017\022\020\021" +
    "\021\035\022\031\023\032\024\017\025\030\001\001\000" +
    "\002\001\001\000\022\006\034\017\022\020\021\021\035" +
    "\022\031\023\032\024\017\025\030\001\001\000\004\004" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\064\017\022\020\021" +
    "\021\035\022\031\023\032\024\017\025\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\037\022\031\023\032\024\017\025\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\047\025\030\001\001\000\006\024\042" +
    "\025\030\001\001\000\002\001\001\000\004\025\046\001" +
    "\001\000\004\025\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\063\024\017\025" +
    "\030\001\001\000\010\023\062\024\017\025\030\001\001" +
    "\000\010\023\061\024\017\025\030\001\001\000\010\023" +
    "\060\024\017\025\030\001\001\000\010\023\057\024\017" +
    "\025\030\001\001\000\010\023\056\024\017\025\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\067\021\035" +
    "\022\031\023\032\024\017\025\030\001\001\000\002\001" +
    "\001\000\014\021\071\022\031\023\032\024\017\025\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\075\010\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\103\001\001\000\006\003\106\004\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\114\017\022\020\021\021" +
    "\035\022\031\023\032\024\017\025\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\117\001\001\000\006\012\121\013\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\125\017\022\020" +
    "\021\021\035\022\031\023\032\024\017\025\030\001\001" +
    "\000\004\005\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\132\017\022\020\021\021\035\022" +
    "\031\023\032\024\017\025\030\001\001\000\002\001\001" +
    "\000\004\005\134\001\001\000\002\001\001\000\004\014" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\143\015\142\017\022\020\021\021" +
    "\035\022\031\023\032\024\017\025\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\154\017\022\020\021\021\035\022\031\023\032" +
    "\024\017\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\157\017\022\020\021\021\035\022\031" +
    "\023\032\024\017\025\030\001\001\000\002\001\001\000" +
    "\022\006\161\017\022\020\021\021\035\022\031\023\032" +
    "\024\017\025\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\165\017\022\020\021\021\035\022\031" +
    "\023\032\024\017\025\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        System.err.println("Error sintÃ¡ctico en lÃ­nea " + (s.left+1) + 
                         ", columna " + (s.right+1) + ": " + s.value);
    }

    public void report_error(String message, Object info) {
        System.err.println("Error sintÃ¡ctico: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= DEFINE ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= DEFINE ID IGUAL expr PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= PRINT lista_expr PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= WHILE expr DO bloque END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= FUNCTION ID PAREN_IZQUIERDO parametros PAREN_DERECHO bloque END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= RETURN expr PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= IF expr THEN bloque elseif_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= LOOP PAREN_IZQUIERDO loop_init PUNTOCOMA loop_cond PUNTOCOMA loop_inc PAREN_DERECHO DO bloque END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_parametros ::= lista_parametros COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_expr ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_expr ::= lista_expr COMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque ::= LLAVE_IZQUIERDO lista_sentencias LLAVE_DERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque ::= LLAVE_IZQUIERDO LLAVE_DERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elseif_list ::= elseif_items 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseif_list ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseif_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseif_items ::= ELSEIF expr THEN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_items",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elseif_items ::= elseif_items ELSEIF expr THEN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif_items",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // loop_init ::= DEFINE ID IGUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_init",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // loop_init ::= ID IGUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_init",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // loop_cond ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_cond",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // loop_inc ::= ID IGUAL expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_inc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_or ::= expr_or OR expr_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_or",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_or ::= expr_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_or",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_and ::= expr_and AND expr_not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_and",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_and ::= expr_not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_and",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_not ::= NOT expr_not 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_not",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_not ::= expr_rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_not",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_rel ::= expr_rel MENOR expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_rel ::= expr_rel MAYOR expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_rel ::= expr_rel MENORIGUAL expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_rel ::= expr_rel MAYORIGUAL expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_rel ::= expr_rel IGUAL expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_rel ::= expr_rel DIFERENTE expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_rel ::= expr_add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rel",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_add ::= expr_add SUMA expr_mul 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_add",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_add ::= expr_add RESTA expr_mul 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_add",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_add ::= expr_mul 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_add",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_mul ::= expr_mul MULTIPLICACION expr_unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_mul",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_mul ::= expr_mul DIVISION expr_unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_mul",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_mul ::= expr_unary 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_mul",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_unary ::= PAREN_IZQUIERDO expr PAREN_DERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_unary ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_unary ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_unary ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_unary ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_unary ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_unary ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_unary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
